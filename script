# Install Microsoft Teams module if not already installed
if (-not (Get-Module -ListAvailable -Name MicrosoftTeams)) {
    Install-Module -Name MicrosoftTeams -Force
}

# Connect to Microsoft Teams
Connect-MicrosoftTeams

# Define variables
$teamName = "Your Team Name"                      # Replace with your team name
$channelName = "Your Private Channel Name"        # Replace with your private channel name
$usersCsvPath = "C:\Path\To\users.csv"            # Replace with the path to your CSV file
$defaultRole = "Member"                           # Set default role to "Member" or "Owner"
$reportFilePath = "C:\Path\To\Report.txt"         # Path to save the report
$retryCount = 5                                   # Number of retries to check if the user is in the team
$retryDelay = 10                                  # Delay in seconds between retries

# Get the Team (Group) ID
$team = Get-Team -DisplayName $teamName
if ($null -eq $team) {
    Write-Host "Team '$teamName' not found."
    exit
}
$groupId = $team.GroupId

# Get the Channel ID for the private channel by name
$channel = Get-TeamChannel -GroupId $groupId | Where-Object { $_.DisplayName -eq $channelName -and $_.MembershipType -eq 'Private' }
if ($null -eq $channel) {
    Write-Host "Private channel '$channelName' not found in team '$teamName'."
    exit
}
$channelId = $channel.Id

# Import users from CSV
$users = Import-Csv -Path $usersCsvPath
$totalUsers = $users.Count
$currentUser = 0

# Create or clear the report file
if (Test-Path $reportFilePath) {
    Clear-Content -Path $reportFilePath
} else {
    New-Item -Path $reportFilePath -ItemType File -Force
}

# Loop through each user
foreach ($user in $users) {
    $currentUser++

    # Update progress bar
    $percentComplete = ($currentUser / $totalUsers) * 100
    Write-Progress -Activity "Adding users to Teams and Channels" -Status "Processing user $currentUser of $totalUsers" -PercentComplete $percentComplete

    try {
        # Check if the user is already a member of the team
        $isMember = Get-TeamUser -GroupId $groupId | Where-Object { $_.User -eq $user.UserEmail }
        if ($null -eq $isMember) {
            # Add the user to the team
            Add-TeamUser -GroupId $groupId -User $user.UserEmail
            Write-Host "Added $($user.UserEmail) to the team."
            Add-Content -Path $reportFilePath -Value "Added $($user.UserEmail) to the team successfully."

            # Wait for the user to be fully added to the team
            $isMemberAfterAdd = $null
            for ($i = 0; $i -lt $retryCount; $i++) {
                Start-Sleep -Seconds $retryDelay
                $isMemberAfterAdd = Get-TeamUser -GroupId $groupId | Where-Object { $_.User -eq $user.UserEmail }
                if ($isMemberAfterAdd) {
                    Write-Host "$($user.UserEmail) is now part of the team."
                    Add-Content -Path $reportFilePath -Value "$($user.UserEmail) is now part of the team."
                    break
                }
            }

            if ($null -eq $isMemberAfterAdd) {
                Write-Host "Failed to verify $($user.UserEmail) in the team after retries."
                Add-Content -Path $reportFilePath -Value "Failed to verify $($user.UserEmail) in the team after retries."
                continue
            }
        } else {
            Write-Host "$($user.UserEmail) is already a member of the team."
            Add-Content -Path $reportFilePath -Value "$($user.UserEmail) is already a member of the team."
        }

        # Add the user to the private channel
        if ($defaultRole -eq "Owner") {
            Add-TeamChannelUser -GroupId $groupId -ChannelId $channelId -User $user.UserEmail -Role Owner
            Write-Host "Added $($user.UserEmail) to the private channel as Owner."
            Add-Content -Path $reportFilePath -Value "Added $($user.UserEmail) to the private channel as Owner successfully."
        } else {
            Add-TeamChannelUser -GroupId $groupId -ChannelId $channelId -User $user.UserEmail
            Write-Host "Added $($user.UserEmail) to the private channel as Member."
            Add-Content -Path $reportFilePath -Value "Added $($user.UserEmail) to the private channel as Member successfully."
        }
        
    } catch {
        Write-Host "Failed to add $($user.UserEmail): $_.Exception.Message"
        Add-Content -Path $reportFilePath -Value "Failed to add $($user.UserEmail): $_.Exception.Message"
    }
}

# Completion message
Write-Host "User addition process completed. Report saved at: $reportFilePath"
